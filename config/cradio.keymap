/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
  //  flavor = "tap-preferred";
   // tapping_term_ms = <200>;
};

/ { 

    combos {
        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
         combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        
            combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };
        
                    combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };
        
                           combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };
        
        
           combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
        

        
    };

 behaviors {
        bkdel: backspace_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE DEL";
            #binding-cells = <0>;
            bindings = <&kp BKSP>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

        keymap {
                compatible = "zmk,keymap";
                
       		default_layer {
		bindings = <
		&kp Q &kp W &kp F &kp P &kp G 					&kp J &kp U  &kp Y    &kp Y   &bkdel
		&kp A &hm LGUI R &hm LALT S &kp T &kp D 			    &kp H &kp N &hm RALT E &hm RGUI I &kp O
		&kp Z &kp X &kp C &kp V &kp B				    &kp M &kp M  &kp CMMA &kp DOT &kp FSLH
          				&sk LSFT &kp SPC  				&sl 1 & sk RCTL 
		>;
		};

       		left_layer {
		bindings = <
		&kp ESC &kp AT &kp HASH &kp DLLR &kp PERCENT		        &kp CARET &kp AMPS &kp STAR &kp SEMI &kp COLON 
		&kp TAB &kp UNDER &kp APOSTROPHE &kp DOUBLE &kp FSLH 		&kp LBKT &kp LBRC  &kp RBRC &kp RBKT  &kp ENTER
		&kp TILDE &kp GRAVE	&kp EQL &kp PIPE &kp BSLH	          &sl 4 &kp LPRN &kp RPRN &trans  &to 3
					                   &kp EXCL  &kp MINUS   					&to 2 &trans 
		>;
		};
		
		right_layer {
		bindings = <
		&kp ESC &trans &trans &trans  &kp FSLH    			&kp MINUS  &kp N7 &kp N8 &kp N9 &kp BKSP 
		&kp BKSP  &kp QMARK  &kp FSLH  &kp COLN  &kp SCLN 			&kp PLUS &kp N4  &kp N5  &kp N6   &kp ENTER
		&trans  &trans &trans &trans   &kp BSLH    			&kp N0 &kp N1 &kp N2 &kp N3  &kp DOT
					  &mo 3 &to 0  				&kp SPC  &mo 2 
		>;
		};	
		
		tri_layer {
		bindings = <
		&kp NUM_1  &kp NUM_2    &kp NUM_3    &kp NUM_4    &kp NUM_5 			&trans &trans   &trans   &trans  &trans
		&kp F1 &kp F2 &kp F3 &kp F4 &kp F5  						&trans &kp PG_UP  &kp K_VOL_UP &kp K_MUTE &trans 
		&bt BT_CLR  &bt BT_NXT &bt BT_PRV &kp F6 &kp F7   				&trans &kp PG_DN  &kp K_VOL_DN  &trans &trans   
					 &trans &trans  					&trans &trans 
		>;
		};	
        
	};
};
